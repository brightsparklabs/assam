/*
 * Created brightSPARK Labs
 * www.brightsparklabs.com
 */

// -----------------------------------------------------------------------------
// PLUGINS
// -----------------------------------------------------------------------------

apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'findbugs'    // code quality
apply plugin: 'jacoco'      // code coverage
apply plugin: 'maven'       // publishing to maven central
apply plugin: 'signing'     // publishing to maven central

// -----------------------------------------------------------------------------
// REPOSITORIES/DEPENDENCIES
// -----------------------------------------------------------------------------

repositories {
    mavenCentral()
}

dependencies {
    compile "com.google.guava:guava:27.1-jre"
    def slf4jVersion = "1.7.26"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"

    testCompile "junit:junit:4.12"

    runtime "org.slf4j:slf4j-log4j12:${slf4jVersion}"
}

// -----------------------------------------------------------------------------
// PROJECT IDENTIFICATION
// -----------------------------------------------------------------------------

project.description = 'Interfaces for modelling Abstract Syntax Notation (ASN.1)'
project.ext.url = 'git@github.com:brightsparklabs/assam.git'
project.ext.scm = 'scm:git@github.com:brightsparklabs/assam.git'
project.group = 'com.brightsparklabs'
project.version = getVersion()

/**
 * Returns the latest tagged version from git using 'git describe'
 */
String getVersion() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "describe", "--dirty"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// -----------------------------------------------------------------------------
// CREATE JAR FILE (via java-library-distribution)
// -----------------------------------------------------------------------------

distributions {
    main {
        baseName = project.name
    }
}

// -----------------------------------------------------------------------------
// GENERATE CODE QUALITY REPORT (via findbugs)
// -----------------------------------------------------------------------------
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// -----------------------------------------------------------------------------
// GENERATE CODE COVERAGE REPORT (via jacoco)
// -----------------------------------------------------------------------------

jacocoTestReport {
    reports {
        html.enabled = true
    }
}

// -----------------------------------------------------------------------------
// PUBLISHING TO MAVEN CENTRAL (via maven and signing)
// -----------------------------------------------------------------------------

group = project.group
archivesBaseName = project.name
version = project.version

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                // optionally artifactId can be defined here
                description project.description
                url project.url

                scm {
                    connection project.scm
                    developerConnection project.scm
                    url project.scm
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id 'brightsparklabs'
                        name 'brightSPARK Labs'
                        email 'enquire@brightsparklabs.com'
                    }
                }
            }
        }
    }
}

