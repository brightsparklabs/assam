/*
 * Created brightSPARK Labs
 * www.brightsparklabs.com
 */

// -----------------------------------------------------------------------------
// PLUGINS
// -----------------------------------------------------------------------------

apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'findbugs'    // code quality
apply plugin: 'jacoco'      // code coverage
apply plugin: 'maven'       // publishing to maven central
apply plugin: 'signing'     // publishing to maven central

// -----------------------------------------------------------------------------
// REPOSITORIES/DEPENDENCIES
// -----------------------------------------------------------------------------

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'org.slf4j:slf4j-api:1.7.10'

    testCompile 'junit:junit:4.12'

    runtime 'org.slf4j:slf4j-log4j12:1.7.10'
}

// -----------------------------------------------------------------------------
// PROJECT IDENTIFICATION
// -----------------------------------------------------------------------------

project.description = '{{TBC}}'
project.ext.url = 'https://bitbucket.org/brightsparklabs/{{TBC}}'
project.ext.scm = 'scm:git@bitbucket.org:brightsparklabs/{{TBC}}.git'
project.group = 'com.brightsparklabs'
project.version = getVersion()

/**
 * Returns the latest tagged version from git using 'git describe'
 */
String getVersion() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "describe", "--dirty"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// -----------------------------------------------------------------------------
// WRAPPER
// -----------------------------------------------------------------------------

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

// -----------------------------------------------------------------------------
// CREATE JAR FILE (via java-library-distribution)
// -----------------------------------------------------------------------------

distributions {
    main {
        baseName = project.name
    }
}

// -----------------------------------------------------------------------------
// GENERATE CODE QUALITY REPORT (via findbugs)
// -----------------------------------------------------------------------------
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
 }

// -----------------------------------------------------------------------------
// GENERATE CODE COVERAGE REPORT (via jacoco)
// -----------------------------------------------------------------------------

jacocoTestReport {
    reports {
        html.enabled = true
    }
}

